http://localhost:8080/project2/dist/index.html

//*[@id="view"]/md-card/md-content[2]/div/md-table-container/table/tbody/tr[5]/td[11]/button[3]
//*[@id="view"]/md-card/md-content[2]/div/md-table-container/table/tbody/tr[7]/td[11]/button[3]


document.getElementsByTagName("md-select-menu")[11]).getElementsByTagName("md-content")[15].getElementsByTagName("md-option")
document.getElementsByTagName("md-select")
document.getElementsByTagName("md-select-menu")
document.getElementsByTagName("input")
protractor on click buttons eg bCtrl.edit(batch)


xpath with span use getText


at min
    start/end date
    name
    location
    
test statistics
pros/cons
what did i learn, what was hard
    testung
    website is pretty brokean
    
public static WebElement waitForLoad(WebDriver driver, String xpath) {
        int times = 0;
        WebElement element = null;
        while(element == null) {
            try {
                element = driver.findElement(By.xpath(xpath));
            } catch(NoSuchElementException e) {
                if(times < 20) {
                    try {
                        times++;
                        Thread.sleep(200);
                    } catch (InterruptedException e1) {
                        e1.printStackTrace();
                    }
                }
                else {
                    e.printStackTrace();
                    throw new NoSuchElementException("Element did not load in time", e);
                }
            }
        }
        return element;
    }

batch page
	all batches
		check each batch
			delete one of them

		create/clone/edit a batch
			cancel
		one row 
			edit
			clone
			delete
			synchronize
	batch timeline, reset after each
		start date
		end date
		curriculum
		focus
		location
		building
		hide concluded batches
		hide batchless trainers

		trainers per page
			0 - 99
			change pages 

running webdriver on linux
	windows server pipeline
	
1. Tests have to be executed from SPA using Angular 4
2. Test results should be visible in angular 4 app
3. There is no need for login
4. Test data should be coming from RDS using hibernate or property file or xml file or all of them
5. Build a working pipeline for the project
6. Optional requirement - TestNG with POM or Page factory
7. Build automation framework using following tools/frameworks
    - Java
        - WebDriver (Selenium)
        - Cucumber 
        - TestNG
    JavaScript
        - Jasmine
        - Protractor
        - Karma
    
The test Salesforce credentials are either as VP or trainer role: 

test.trainer@revature.com.int1
p@$$w0rd2
test.vpoftech@revature.com.int1
p@$$w0rd1

the instance URL is https://dev.assignforce.revaturelabs.com