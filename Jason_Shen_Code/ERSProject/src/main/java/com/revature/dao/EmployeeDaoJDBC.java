package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.revature.model.Employee;
import com.revature.model.RoleType;
import com.revature.model.Ticket;
import com.revature.util.ConnectionUtil;
import com.revature.util.LogUtil;

public class EmployeeDaoJDBC implements EmployeeDao {
	private static EmployeeDaoJDBC employeeDaoJDBC;
	private EmployeeDaoJDBC() {
		
	}
	public static EmployeeDaoJDBC getEmployeeDaoJDBC() {
		if (employeeDaoJDBC == null) {
			employeeDaoJDBC = new EmployeeDaoJDBC();
		}
		return employeeDaoJDBC;
	}
	
	public boolean insert(Employee employee) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;
			String pwAsHash = "";
			// Statement to insert Employee into table
			String command = "INSERT INTO EMPLOYEE (firstname, lastname, email, password) VALUES(?,?,?,?)";
			PreparedStatement statement = connection.prepareStatement(command);

			// Statement to convert password to hash value
			String pwToHash = "SELECT GET_EMPLOYEE_HASH(?,?) AS HASH FROM DUAL";
			PreparedStatement hashstmt = connection.prepareStatement(pwToHash);
			
			hashstmt.setString(1, employee.getEmail());
			hashstmt.setString(2, employee.getPassword());
			ResultSet hashresult = hashstmt.executeQuery();
			if (hashresult.next()) {
				pwAsHash = hashresult.getString("HASH");
			}			
			
			//Set attributes to be inserted
			statement.setString(++statementIndex, employee.getFirstName().toUpperCase());
			statement.setString(++statementIndex, employee.getLastName().toUpperCase());
			statement.setString(++statementIndex, employee.getEmail().toLowerCase());
			statement.setString(++statementIndex, pwAsHash);


			
			if(statement.executeUpdate() > 0 ) {
				return true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return false;
	}
	
	public boolean setRole(Employee employee, String role) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			
			// Need to do this because the id is auto generated by the DB.
			// The employee object that was passed in as a param doesn't have an id
			//     so we need to select and grab the id after it was inserted to the DB.
			
			Employee thisemployee = select(employee);
			int id = thisemployee.getId();
			System.out.println(id);
			
			// Statement to set the role of the new employee to EMPLOYEE (non-manager) by default
			String setRoleCmd = "INSERT INTO EMPLOYEEROLE VALUES(?,?)";
			PreparedStatement setRoleStmt = connection.prepareStatement(setRoleCmd);
			setRoleStmt.setInt(1, id);
			// 1 is the type id for Employee
			if (role.toUpperCase().equals("EMPLOYEE")) {
				setRoleStmt.setInt(2, 1);	
			}
			else if (role.toUpperCase().equals("MANAGER")) {
				setRoleStmt.setInt(2, 2);
			}
			// If invalid, just set to employee by default.
			else {
				setRoleStmt.setInt(2, 1);	
			}
			
			if (setRoleStmt.executeUpdate() > 0) {
				System.out.println("Role set!");
				return true;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return false;
	}
	
	public List<RoleType> getRoles(Employee employee) {
		try(Connection connection = ConnectionUtil.getConnection()) {
						
			int statementIndex = 0;
			String command = "SELECT EMPLOYEEID, EMPLOYEEROLE.ROLETYPEID, ROLETYPEDESC FROM \r\n" + 
					"EMPLOYEEROLE INNER JOIN ROLETYPE ON EMPLOYEEROLE.ROLETYPEID = ROLETYPE.ROLETYPEID\r\n" + 
					"WHERE EMPLOYEEID = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setInt(++statementIndex, select(employee).getId());		
			ResultSet result = statement.executeQuery();
			
			List<RoleType> role_list = new ArrayList<>();
			while(result.next()) {
				role_list.add(new RoleType(
						result.getInt("ROLETYPEID"),
						result.getString("ROLETYPEDESC")
						));
			}
			return role_list;
			
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return new ArrayList<>();
	}
	
	public Employee select(Employee employee) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;
			String command = "SELECT * FROM EMPLOYEE WHERE EMAIL = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setString(++statementIndex, employee.getEmail());
			ResultSet result = statement.executeQuery();

			while(result.next()) {
				
				return new Employee(
						result.getInt("EMPLOYEEID"),
						result.getString("FIRSTNAME"),
						result.getString("LASTNAME"),
						result.getString("EMAIL"),
						result.getString("PASSWORD")
						);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return new Employee();
	}
	
	public Employee selectById(int id) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;
			String command = "SELECT * FROM EMPLOYEE WHERE EMPLOYEEID = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setInt(++statementIndex, id);
			ResultSet result = statement.executeQuery();

			while(result.next()) {
				
				return new Employee(
						result.getInt("EMPLOYEEID"),
						result.getString("FIRSTNAME"),
						result.getString("LASTNAME"),
						result.getString("EMAIL"),
						result.getString("PASSWORD")
						);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return new Employee();
	}
	
	public String getEmployeeHash(Employee employee) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;
			String command = "SELECT GET_EMPLOYEE_HASH(?,?) AS HASH FROM DUAL";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setString(++statementIndex, employee.getEmail());
			statement.setString(++statementIndex, employee.getPassword());
			ResultSet result = statement.executeQuery();

			if(result.next()) {
				return result.getString("HASH");
			}
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		} 
		return new String();
	}
	
	public void updatePassword(Employee employee, String password) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;
			
			
			// Statement to convert password to hash value
			String pwAsHash = "";
			String pwToHash = "SELECT GET_EMPLOYEE_HASH(?,?) AS HASH FROM DUAL";
			PreparedStatement hashstmt = connection.prepareStatement(pwToHash);
			
			hashstmt.setString(1, employee.getEmail());
			hashstmt.setString(2, password);
			ResultSet hashresult = hashstmt.executeQuery();
			if (hashresult.next()) {
				pwAsHash = hashresult.getString("HASH");
			}			
			
			String command = "UPDATE EMPLOYEE SET PASSWORD = ? WHERE EMPLOYEEID = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setString(++statementIndex, pwAsHash);
			statement.setInt(++statementIndex, employee.getId());
			if (statement.executeUpdate() > 0 ) {
				return;
			}


		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return;
	}
	
	public void updateName(Employee employee, String firstname, String lastname) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;			
			
			String command = "UPDATE EMPLOYEE SET FIRSTNAME = ?, LASTNAME = ? WHERE EMPLOYEEID = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setString(++statementIndex, firstname);
			statement.setString(++statementIndex, lastname);
			statement.setInt(++statementIndex, employee.getId());
			if (statement.executeUpdate() > 0 ) {
				// In addition to updating it in the database, we need to update the current BEAN
				employee.setFirstName(firstname);
				employee.setLastName(lastname);
				return;
			}

		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return;
	}
	
	public void updateEmail(Employee employee, String email) {
		try(Connection connection = ConnectionUtil.getConnection()) {
			int statementIndex = 0;			
			
			String command = "UPDATE EMPLOYEE SET EMAIL = ? WHERE EMPLOYEEID = ?";
			PreparedStatement statement = connection.prepareStatement(command);
			statement.setString(++statementIndex, email);
			statement.setInt(++statementIndex, employee.getId());
			if (statement.executeUpdate() > 0 ) {
				// In addition to updating it in the database, we need to update the current BEAN
				employee.setEmail(email);
				return;
			}

		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return;
	}

	@Override
	public List<Employee> selectAll() {
		try(Connection connection = ConnectionUtil.getConnection()) {
			
			String command = "SELECT * FROM EMPLOYEE "
					+ "LEFT JOIN EMPLOYEEROLE "
						+ "ON EMPLOYEE.EMPLOYEEID = EMPLOYEEROLE.EMPLOYEEID "
					+ "LEFT JOIN ROLETYPE "
						+ "ON EMPLOYEEROLE.ROLETYPEID = ROLETYPE.ROLETYPEID ORDER BY EMPLOYEE.EMPLOYEEID ASC";
			PreparedStatement statement = connection.prepareStatement(command);
			ResultSet result = statement.executeQuery();
			
			List<Employee> employee_list = new ArrayList<>();
			
			while(result.next()) {
				
				employee_list.add(new Employee(
						result.getInt("EMPLOYEEID"),
						result.getString("FIRSTNAME"),
						result.getString("LASTNAME"),
						result.getString("EMAIL"),
						result.getString("PASSWORD"),
						result.getString("ROLETYPEDESC")
				));
			}
			return employee_list;
			
		} catch (SQLException e) {
			e.printStackTrace();
			LogUtil.logger.warn(e);
		}
		return new ArrayList<>();
	}
}
